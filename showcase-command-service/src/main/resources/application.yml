spring:
  application:
    name: axon-showcase-command-service
  main:
    banner-mode: off
  datasource:
    url: jdbc:postgresql://${DB_HOSTS:localhost}/${DB_NAME:showcase-events}?currentSchema=${DB_SCHEMA:public}&${DB_PARAMS:}
    username: ${DB_USER:showcase}
    password: ${DB_PASSWORD:}
    hikari:
      maximum-pool-size: ${DB_POOL_MAX_SIZE:100}
      minimum-idle: ${DB_POOL_MIN_IDLE:20}
      max-lifetime: ${DB_POOL_MAX_LIFETIME:1800000}
      connection-timeout: ${DB_POOL_CONNECTION_TIMEOUT:30000}
      validation-timeout: ${DB_POOL_VALIDATION_TIMEOUT:5000}
      idle-timeout: ${DB_POOL_IDLE_TIMEOUT:600000}
      leak-detection-threshold: ${DB_POOL_LEAK_DETECTION_THRESHOLD:0}
      initialization-fail-timeout: ${DB_POOL_INITIALIZATION_FAIL_TIMEOUT:30000}
  flyway:
    enabled: ${FLYWAY_MIGRATION_ENABLED:true}
    locations: classpath:db/migration/{vendor}
  cache:
    type: jcache
  jackson:
    default-property-inclusion: non_null
  web:
    locale: en
  webflux:
    problemdetails:
      enabled: true
  threads:
    virtual:
      enabled: true

axon:
  serializer:
    messages: jackson
  distributed:
    enabled: true
    jgroups:
      configuration-file: ${JGROUPS_CONFIG_FILE:tcp-nio.xml}
      cluster-name: ${JGROUPS_CLUSTER_NAME:axon-showcase}
      bind-addr: ${JGROUPS_BIND_ADDR:LOOPBACK}
      bind-port: ${JGROUPS_BIND_PORT:7800}
      gossip:
        autoStart: ${JGROUPS_GOSSIP_AUTO_START:false}
        hosts: ${JGROUPS_GOSSIP_HOSTS:localhost[12001]}
      tcp-ping:
        hosts: ${JGROUPS_TCP_PING_HOSTS:localhost[7800]}
      kube-ping:
        namespace: ${JGROUPS_KUBE_PING_NAMESPACE:default}
        labels: ${JGROUPS_KUBE_PING_LABELS:jgroups-cluster=axon-showcase}
  eventhandling:
    processors:
      showcase-saga:
        mode: tracking
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    default-topic: ${KAFKA_TOPIC_EVENTS:axon-showcase-events}
    client-id: ${spring.application.name}
    ssl:
      key-password: ${KAFKA_SSL_KEY_PASSWORD:}
      keystore-location: ${KAFKA_SSL_KEYSTORE_LOCATION:}
      keystore-password: ${KAFKA_SSL_KEYSTORE_PASSWORD:}
      truststore-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:}
      truststore-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD:}
    properties:
      security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
      sasl.mechanism: ${KAFKA_SASL_MECHANISM:}
      sasl.jaas.config: ${KAFKA_SASL_JAAS_CONFIG:}
    publisher:
      processing-group: event-publishing
    fetcher:
      enabled: false
  metrics:
    micrometer:
      dimensional: true
  tracing:
    repository:
      aggregate-id-attribute-name: axon.aggregateId

db-scheduler:
  delay-startup-until-context-ready: true
  threads: 100
  polling-interval: PT0.5S
  polling-strategy: lock_and_fetch

showcase:
  command:
    exit-after-flyway-migration: ${EXIT_AFTER_FLYWAY_MIGRATION:false}
    showcase-cache:
      maximum-size: ${SHOWCASE_CACHE_MAX_SIZE:100000}
      expires-after-access: ${SHOWCASE_CACHE_EXPIRES_AFTER_ACCESS:PT10M}
      expires-after-write: ${SHOWCASE_CACHE_EXPIRES_AFTER_WRITE:PT5M}

server:
  port: 8081
  error:
    whitelabel:
      enabled: false

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
        add-additional-paths: true
  metrics:
    distribution:
      percentiles-histogram:
        all: ${METRICS_PERCENTILES_HISTOGRAM_ALL:true}
      percentiles:
        all: ${METRICS_PERCENTILES_ALL:0.95, 0.99, 0.999}
      expiry:
        all: ${METRICS_EXPIRY_ALL:PT10M}
    tags:
      application: axon-showcase
  prometheus:
    metrics:
      export:
        enabled: false
  otlp:
    metrics:
      export:
        enabled: false
    tracing:
      export:
        enabled: false
