spring:
  application:
    name: axon-showcase-projection-service
  main:
    banner-mode: off
  elasticsearch:
    uris: ${ES_URIS:http://localhost:9200}
    username: ${ES_USER:elastic}
    password: ${ES_PASSWORD:}
    connection-timeout: ${ES_CONNECTION_TIMEOUT:PT1S}
    socket-timeout: ${ES_SOCKET_TIMEOUT:PT10S}
    socket-keep-alive: ${ES_SOCKET_KEEP_ALIVE:false}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      username: ${REDIS_USERNAME:}
      password: ${REDIS_PASSWORD:}
      connect-timeout: ${REDIS_CONNECT_TIMEOUT:PT1S}
      timeout: ${REDIS_READ_TIMEOUT:PT2S}
      client-name: ${spring.application.name}
      client-type: lettuce
      lettuce:
        shutdown-timeout: ${REDIS_SHUTDOWN_TIMEOUT:PT0.1S}
        pool:
          enabled: true
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:0}
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-wait: ${REDIS_POOL_MAX_WAIT:PT-0.001S}
          time-between-eviction-runs: ${REDIS_POOL_TIME_BETWEEN_EVICTION_RUNS:}
  threads:
    virtual:
      enabled: true

axon:
  serializer:
    messages: jackson
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    default-topic: ${KAFKA_TOPIC_EVENTS:axon-showcase-events}
    client-id: ${spring.application.name}
    properties:
      security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    publisher:
      enabled: false
    consumer:
      properties:
        partition.assignment.strategy: org.apache.kafka.clients.consumer.CooperativeStickyAssignor
    fetcher:
      poll-timeout: ${KAFKA_FETCHER_POLL_TIMEOUT:5000}
      consumer-count: ${KAFKA_FETCHER_CONSUMER_COUNT:1}
  eventhandling:
    processors:
      projectors:
        source: subscribableKafkaMessageSource
        mode: subscribing
  metrics:
    micrometer:
      dimensional: true

showcase:
  projection:
    metrics:
      tags:
        - key: ${METRICS_TAG_APPLICATION_KEY:application}
          value: ${METRICS_TAG_APPLICATION_VALUE:axon-showcase}
    tracing:
      logging: ${TRACING_LOGGING:false}

server:
  port: 8083
  error:
    whitelabel:
      enabled: false

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  endpoint:
    health:
      show-details: always
      probes:
        enabled: on
        add-additional-paths: on
    prometheus:
      enabled: ${METRICS_PROMETHEUS_ENABLED:false}
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: ${METRICS_PERCENTILES_HISTOGRAM:true}
        http.client.requests: ${METRICS_PERCENTILES_HISTOGRAM:true}
      percentiles:
        http.server.requests: ${METRICS_PERCENTILES:0.5, 0.75, 0.95, 0.98, 0.99, 0.995, 0.999}
        http.client.requests: ${METRICS_PERCENTILES:0.5, 0.75, 0.95, 0.98, 0.99, 0.995, 0.999}
      slo:
        http.server.requests: ${METRICS_SLO:100ms, 200ms, 300ms, 400ms, 500ms, 1s, 2s, 3s, 4s, 5s}
        http.client.requests: ${METRICS_SLO:100ms, 200ms, 300ms, 400ms, 500ms, 1s, 2s, 3s, 4s, 5s}
    export:
      prometheus:
        enabled: ${METRICS_PROMETHEUS_ENABLED:false}
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      export:
        enabled: ${TRACING_OTLP_ENABLED:false}
      endpoint: ${TRACING_OTLP_ENDPOINT:}

---
spring:
  config:
    activate:
      on-profile: redis-cluster
  data:
    redis:
      cluster:
        nodes: ${REDIS_CLUSTER_NODES:}
        max-redirects: ${REDIS_CLUSTER_MAX_REDIRECTS:}
      lettuce:
        cluster:
          refresh:
            dynamic-refresh-sources: ${REDIS_CLUSTER_DYNAMIC_REFRESH_SOURCES:true}
            period: ${REDIS_CLUSTER_REFRESH_PERIOD:}
            adaptive: ${REDIS_CLUSTER_REFRESH_ADAPTIVE:false}
